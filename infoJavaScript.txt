Tutorial JS
------------------------------------------------------------------------

JS HOME

 Tutorial de JavaScript
 JavaScript é a linguagem de programação mais popular do mundo.
 JavaScript é a linguagem de programação da web.
 JavaScript é fácil de aprender.
 Este tutorial ensinará JavaScript do básico ao avançado.

Exemplo:

<!DOCTYPE html>
<html>
<body>

<h2>My First JavaScript</h2>

<button type="button"
onclick="document.getElementById('demo').innerHTML = Date()">Click me to display Date and Time.</button>

<p id="demo"></p>

</body>
</html> 

Por que estudar JavaScript?
 JavaScript é uma das 3 linguagens que todos os desenvolvedores da web devem aprender:

   1. HTML para definir o conteúdo das páginas da web

   2. CSS para especificar o layout das páginas da web

   3. JavaScript para programar o comportamento das páginas da web

 Este tutorial cobre todas as versões do JavaScript:
  O JavaScript original ES1 ES2 ES3 (1997-1999)
  A primeira revisão principal ES5 (2009)
  A segunda revisão ES6 (2015)
  As adições anuais (2016, 2017, 2018)

------------------------------------------------------------------------
Introdução JS

Introdução ao JavaScript
 Esta página contém alguns exemplos do que o JavaScript pode fazer.
  
 JavaScript pode alterar o conteúdo HTML
 Um dos muitos métodos HTML JavaScript é getElementById().

O exemplo abaixo "encontra" um elemento HTML (com id = "demo") e altera o conteúdo do elemento (innerHTML) para "Hello JavaScript":

Exemplo
document.getElementById("demo").innerHTML = "Hello JavaScript";

Exemplo:

<!DOCTYPE html>
<html>
<body>

<h2>What Can JavaScript Do?</h2>

<p id="demo">JavaScript can change HTML content.</p>

<button type="button" onclick='document.getElementById("demo").innerHTML = "Hello JavaScript!"'>Click Me!</button>

</body>
</html>

 JavaScript aceita aspas duplas e simples:

 JavaScript pode alterar valores de atributos de HTML
 Neste exemplo, JavaScript altera o valor do src atributo (fonte) de uma <img>tag:

 Exemplo:

<!DOCTYPE html>
<html>
<body>

<h2>What Can JavaScript Do?</h2>

<p>JavaScript can change HTML attribute values.</p>

<p>In this case JavaScript changes the value of the src (source) attribute of an image.</p>

<button onclick="document.getElementById('myImage').src='pic_bulbon.gif'">Turn on the light</button>

<img id="myImage" src="pic_bulboff.gif" style="width:100px">

<button onclick="document.getElementById('myImage').src='pic_bulboff.gif'">Turn off the light</button>

</body>
</html>


JavaScript pode alterar estilos HTML (CSS)
Alterar o estilo de um elemento HTML é uma variante da alteração de um atributo HTML:

Exemplo
document.getElementById("demo").style.fontSize = "35px";

Exemplo: 

<!DOCTYPE html>
<html>
<body>

<h2>What Can JavaScript Do?</h2>

<p id="demo">JavaScript can change the style of an HTML element.</p>

<button type="button" onclick="document.getElementById('demo').style.fontSize='35px'">Click Me!</button>

</body>
</html> 


JavaScript pode ocultar elementos HTML
Ocultar elementos HTML pode ser feito alterando o displayestilo:

Exemplo
document.getElementById("demo").style.display = "none";

Exemplo

<!DOCTYPE html>
<html>
<body>

<h2>What Can JavaScript Do?</h2>

<p id="demo">JavaScript can hide HTML elements.</p>

<button type="button" onclick="document.getElementById('demo').style.display='none'">Click Me!</button>

</body>
</html> 


JavaScript pode mostrar elementos HTML
Mostrar elementos HTML ocultos também pode ser feito alterando o displayestilo:

Exemplo
document.getElementById("demo").style.display = "block";

Exemplo: 

<!DOCTYPE html>
<html>
<body>

<h2>What Can JavaScript Do?</h2>

<p>JavaScript can show hidden HTML elements.</p>

<p id="demo" style="display:none">Hello JavaScript!</p>

<button type="button" onclick="document.getElementById('demo').style.display='block'">Click Me!</button>

</body>
</html> 

Você sabia?
 JavaScript e Java são linguagens completamente diferentes, tanto em conceito quanto em design.
 JavaScript foi inventado por Brendan Eich em 1995 e se tornou um padrão ECMA em 1997.
 ECMA-262 é o nome oficial do padrão. ECMAScript é o nome oficial do idioma.

------------------------------------------------------------------------
JS para onde - JavaScript para onde

A tag <script>
Em HTML, o código JavaScript é inserido entre as tags <script>e </script>.

Exemplo:

<script>
document.getElementById("demo").innerHTML = "My First JavaScript";
</script>

 Os exemplos antigos de JavaScript podem usar um atributo de tipo: <script type = "text / javascript">.
 O atributo type não é obrigatório. JavaScript é a linguagem de script padrão em HTML.


Funções e eventos JavaScript
 Um JavaScript function é um bloco de código JavaScript que pode ser executado quando "chamado".
 Por exemplo, uma função pode ser chamada quando ocorre um evento, como quando o usuário clica em um botão.

JavaScript em <head> ou <body>
 Você pode colocar qualquer número de scripts em um documento HTML.
 Os scripts podem ser colocados na <body>, ou na <head> seção de uma página HTML, ou em ambas.

JavaScript em <head>
 Neste exemplo, um JavaScript function é colocado na <head> seção de uma página HTML.

A função é invocada (chamada) quando um botão é clicado:

Exemplo:

<!DOCTYPE html>
<html>
<head>
<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
</head>
<body>

<h1>A Web Page</h1>
<p id="demo">A Paragraph</p>
<button type="button" onclick="myFunction()">Try it</button>

</body>
</html>


JavaScript em <body>
 Neste exemplo, um JavaScript function é colocado na <body> seção de uma página HTML.
 A função é invocada (chamada) quando um botão é clicado:

Exemplo:

<!DOCTYPE html>
<html>
<body>

<h1>A Web Page</h1>
<p id="demo">A Paragraph</p>
<button type="button" onclick="myFunction()">Try it</button>

<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>

</body>
</html>

Colocar scripts na parte inferior do elemento <body> melhora a velocidade de exibição, porque a interpretação do script torna a exibição mais lenta.

JavaScript externo
 Os scripts também podem ser colocados em arquivos externos:

Arquivo externo: myScript.js

function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}

 Os scripts externos são práticos quando o mesmo código é usado em muitas páginas da web diferentes.
 Os arquivos JavaScript têm a extensão de arquivo .js .
 Para usar um script externo, coloque o nome do arquivo de script no src atributo (fonte) de uma <script>tag:

Exemplo
<script src="myScript.js"></script>

<!DOCTYPE html>
<html>
<body>

<h2>External JavaScript</h2>

<p id="demo">A Paragraph.</p>

<button type="button" onclick="myFunction()">Try it</button>

<p>(myFunction is stored in an external file called "myScript.js")</p>

<script src="myScript.js"></script>

</body>
</html>


 Você pode colocar uma referência de script externa em <head> ou <body>como desejar.
 O script se comportará como se estivesse localizado exatamente onde a <script>tag está localizada.
 Os scripts externos não podem conter <script>tags.


 Vantagens do JavaScript externo
  Colocar scripts em arquivos externos tem algumas vantagens:
  Ele separa HTML e código
  Isso torna o HTML e o JavaScript mais fáceis de ler e manter
  Arquivos JavaScript em cache podem acelerar o carregamento da página
  Para adicionar vários arquivos de script a uma página - use várias tags de script:

Exemplo
<script src="myScript1.js"></script>
<script src="myScript2.js"></script>

 Referências Externas
  Os scripts externos podem ser referenciados com um URL completo ou com um caminho relativo à página da web atual.

Este exemplo usa um URL completo para vincular a um script:

Exemplo
<script src="https://www.w3schools.com/js/myScript1.js"></script>

Este exemplo usa um script localizado em uma pasta especificada no site atual:

Exemplo
<script src="/js/myScript1.js"></script>

Este exemplo está vinculado a um script localizado na mesma pasta da página atual:

Exemplo
<script src="myScript1.js"></script>

------------------------------------------------------------------------
Saída JS - Saída de JavaScript

Possibilidades de exibição de JavaScript
JavaScript pode "exibir" dados de maneiras diferentes:

Escrevendo em um elemento HTML, usando innerHTML.
Escrevendo na saída HTML usando document.write().
Escrevendo em uma caixa de alerta, usando window.alert().
Escrevendo no console do navegador, usando console.log().

Usando innerHTML
Para acessar um elemento HTML, JavaScript pode usar o document.getElementById(id) método.
O id atributo define o elemento HTML. A innerHTML propriedade define o conteúdo HTML:

Exemplo
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My First Paragraph</p>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = 5 + 6;
</script>

</body>
</html>

Alterar a propriedade innerHTML de um elemento HTML é uma maneira comum de exibir dados em HTML.


Usando document.write ()
Para fins de teste, é conveniente usar document.write():

Exemplo:

<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<script>
document.write(5 + 6);
</script>

</body>
</html>


Usar document.write () após o carregamento de um documento HTML excluirá todos os HTML existentes:

Exemplo:
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<button type="button" onclick="document.write(5 + 6)">Try it</button>

</body>
</html>

O método document.write () deve ser usado apenas para teste.

Usando window.alert ()
Você pode usar uma caixa de alerta para exibir dados:

Exemplo
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<script>
window.alert(5 + 6);
</script>

</body>
</html>

Você pode pular a window palavra - chave.
Em JavaScript, o objeto de janela é o objeto de escopo global, o que significa que variáveis, propriedades e métodos, por padrão, pertencem ao objeto de janela. Isso também significa que especificar a windowpalavra-chave é opcional:

Exemplo
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<script>
alert(5 + 6);
</script>

</body>
</html>

Usando console.log ()
Para fins de depuração, você pode chamar o console.log() método no navegador para exibir dados.
Você aprenderá mais sobre depuração em um capítulo posterior.

Exemplo
<!DOCTYPE html>
<html>
<body>

<script>
console.log(5 + 6);
</script>

</body>
</html>


Impressão JavaScript
 JavaScript não possui nenhum objeto de impressão ou método de impressão.
 Você não pode acessar dispositivos de saída de JavaScript.
 A única exceção é que você pode chamar o window.print() método no navegador para imprimir o conteúdo da janela atual.

Exemplo
<!DOCTYPE html>
<html>
<body>

<button onclick="window.print()">Print this page</button>

</body>
</html>

------------------------------------------------------------------------
Declarações JS

Exemplo
var x, y, z;    // Statement 1
x = 5;          // Statement 2
y = 6;          // Statement 3
z = x + y;      // Statement 4

Programas JavaScript
 Um programa de computador é uma lista de "instruções" a serem "executadas" por um computador.
 Em uma linguagem de programação, essas instruções de programação são chamadas de instruções .
 Um programa JavaScript é uma lista de instruções de programação .
 Em HTML, os programas JavaScript são executados pelo navegador da web.

Declarações de JavaScript
 As instruções JavaScript são compostas de:
 Valores, operadores, expressões, palavras-chave e comentários.

Esta declaração instrui o navegador a escrever "Hello Dolly". dentro de um elemento HTML com id = "demo":

Exemplo
document.getElementById("demo").innerHTML = "Hello Dolly.";

Exemplo:
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Statements</h2>

<p>In HTML, JavaScript statements are executed by the browser.</p>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = "Hello Dolly.";
</script>

</body>
</html>

A maioria dos programas JavaScript contém muitas instruções JavaScript.
As instruções são executadas, uma a uma, na mesma ordem em que são escritas.
Os programas JavaScript (e as instruções JavaScript) costumam ser chamados de código JavaScript.

Ponto e vírgula;
 Os pontos-e-vírgulas separam as instruções JavaScript.
 Adicione um ponto e vírgula no final de cada instrução executável:

var a, b, c;     // Declare 3 variables
a = 5;           // Assign the value 5 to a
b = 6;           // Assign the value 6 to b
c = a + b;       // Assign the sum of a and b to c

Quando separados por ponto e vírgula, várias instruções em uma linha são permitidas:

a = 5; b = 6; c = a + b;

Na web, você pode ver exemplos sem ponto-e-vírgula.
Terminar instruções com ponto e vírgula não é obrigatório, mas altamente recomendado.

JavaScript White Space
 JavaScript ignora vários espaços. Você pode adicionar um espaço em branco ao seu script para torná-lo mais legível.

As seguintes linhas são equivalentes:

var person = "Hege";
var person="Hege";
Uma boa prática é colocar espaços ao redor dos operadores (= + - * /):

var x = y + z;

Comprimento de linha JavaScript e quebras de linha
Para melhor legibilidade, os programadores geralmente gostam de evitar linhas de código com mais de 80 caracteres.

Se uma instrução JavaScript não couber em uma linha, o melhor lugar para quebrá-la é depois de um operador:

Exemplo
document.getElementById("demo").innerHTML =
"Hello Dolly!";


Blocos de código JavaScript
 As instruções JavaScript podem ser agrupadas em blocos de código, entre chaves {...}.
 O objetivo dos blocos de código é definir instruções a serem executadas juntas.
 Um lugar onde você encontrará instruções agrupadas em blocos é nas funções JavaScript:

Exemplo
function myFunction() {
  document.getElementById("demo1").innerHTML = "Hello Dolly!";
  document.getElementById("demo2").innerHTML = "How are you?";
}

Neste tutorial, usamos 2 espaços de indentação para blocos de código.
Você aprenderá mais sobre as funções posteriormente neste tutorial.

Palavras-chave JavaScript
As instruções JavaScript geralmente começam com uma palavra - chave para identificar a ação JavaScript a ser executada.

Visite nossa referência de Palavras reservadas para ver uma lista completa de palavras-chave JavaScript .
Palavras-chave JavaScript são palavras reservadas. Palavras reservadas não podem ser usadas como nomes de variáveis.
------------------------------------------------------------------------
Sintaxe JS - Sintaxe JavaScript

 A sintaxe JavaScript é o conjunto de regras, como os programas JavaScript são construídos:
------------------------------------------------------------------------
Comentários JS

------------------------------------------------------------------------
Variáveis ​​JS

------------------------------------------------------------------------
JS Let

------------------------------------------------------------------------
JS Const

------------------------------------------------------------------------
Operadores JS

------------------------------------------------------------------------
JS Aritmética

------------------------------------------------------------------------
Atribuição JS

------------------------------------------------------------------------
Tipos de dados JS

------------------------------------------------------------------------
Funções JS

------------------------------------------------------------------------
Objetos JS

------------------------------------------------------------------------
Eventos JS

------------------------------------------------------------------------
JS Strings

------------------------------------------------------------------------
Métodos JS String

------------------------------------------------------------------------
Números JS

------------------------------------------------------------------------
Métodos de número JS

------------------------------------------------------------------------
JS Arrays

------------------------------------------------------------------------
Métodos JS Array

------------------------------------------------------------------------
JS Array Sort

------------------------------------------------------------------------
Iteração JS Array

------------------------------------------------------------------------
Datas JS

------------------------------------------------------------------------
Formatos de data JS

------------------------------------------------------------------------
Métodos de obtenção de data JS

------------------------------------------------------------------------
Métodos de definição de data JS

------------------------------------------------------------------------
JS Math

------------------------------------------------------------------------
JS Random

------------------------------------------------------------------------
JS Booleans

------------------------------------------------------------------------
Comparações JS

------------------------------------------------------------------------
Condições JS

------------------------------------------------------------------------
JS Switch

------------------------------------------------------------------------
JS Loop para

------------------------------------------------------------------------
JS Loop For In

------------------------------------------------------------------------
JS Loop para de

------------------------------------------------------------------------
JS Loop While

------------------------------------------------------------------------
JS Break

------------------------------------------------------------------------
Conversão de tipo JS

------------------------------------------------------------------------
JS Bitwise

------------------------------------------------------------------------
JS RegExp

------------------------------------------------------------------------
Erros JS

------------------------------------------------------------------------
Escopo JS

------------------------------------------------------------------------
JS Hoisting

------------------------------------------------------------------------
Modo JS Strict

------------------------------------------------------------------------
JS esta palavra-chave

------------------------------------------------------------------------
Função de seta JS

------------------------------------------------------------------------
Classes JS

------------------------------------------------------------------------
JS JSON

------------------------------------------------------------------------
Depuração JS

------------------------------------------------------------------------
Guia de estilo JS

------------------------------------------------------------------------
JS Best Practices

------------------------------------------------------------------------
JS Mistakes

------------------------------------------------------------------------
JS Performance

------------------------------------------------------------------------
Palavras Reservadas JS

------------------------------------------------------------------------

------------------------------------------------------------------------
------------------------------------------------------------------------


Versões JS
Versões JS
JS 2009 (ES5)
JS 2015 (ES6)
JS 2016
JS 2017
JS 2018
JS IE / Edge
História JS

Formulários JS
Formulários JS
API de formulários

Objetos JS
Definições de Objeto
Propriedades do objeto
Métodos de Objeto
Exibição de objeto
Acessores de objeto
Construtores de objetos
Protótipos de objeto
Objeto ECMAScript 5

Funções JS
Definições de função
Parâmetros de Função
Invocação de Função
Chamada de Função
Função Aplicar
Fechamentos de funções

Classes JS
Introdução à aula
Herança de classe
Class Static

JS Async
JS Callbacks
JS Assíncrono
JS Promises
JS Async / Await

JS HTML DOM
DOM Intro
Métodos DOM
Documento DOM
Elementos DOM
HTML DOM
DOM CSS
Animações DOM
Eventos DOM
Listener de eventos DOM
Navegação DOM
Nós DOM
Coleções DOM
Listas de nós DOM

JS Browser BOM
Janela JS
Tela JS
Localização JS
História JS
JS Navigator
Alerta pop-up JS
JS Timing
Cookies JS

JS AJAX
AJAX Intro
AJAX XMLHttp
Pedido AJAX
Resposta AJAX
Arquivo XML AJAX
PHP AJAX
AJAX ASP
Banco de dados AJAX
Aplicativos AJAX
Exemplos AJAX

JS JSON
JSON Intro
Sintaxe JSON
JSON vs XML
Tipos de dados JSON
JSON Parse
JSON Stringify
Objetos JSON
Matrizes JSON
JSON PHP
JSON HTML
JSON JSONP

JS Web APIs
Introdução à API da Web
API de histórico da web
API de armazenamento da web
API Web Worker
API Web Fetch
API Web Geolocation

JS vs jQuery
Seletores jQuery
jQuery HTML
CSS jQuery
jQuery DOM

Exemplos JS
Exemplos JS
JS HTML DOM
JS HTML Input
Objetos JS HTML
Eventos JS HTML
Navegador JS
Editor JS
Exercícios JS
JS Quiz
Certificado JS

Referências JS
Objetos JavaScript
Objetos HTML DOM

